#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Bot_NetMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 21

# The Active Message type associated with this message.
AM_TYPE = 137

class Bot_NetMsg(tinyos.message.Message.Message):
    # Create a new Bot_NetMsg of size 21.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=21):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Bot_NetMsg> \n"
        try:
            s += "  [tx_timestamp=%f]\n" % (self.get_tx_timestamp())
        except:
            pass
        try:
            s += "  [seqNo=0x%x]\n" % (self.get_seqNo())
        except:
            pass
        try:
            s += "  [send_ID=0x%x]\n" % (self.get_send_ID())
        except:
            pass
        try:
            s += "  [recv_Rob_ID=0x%x]\n" % (self.get_recv_Rob_ID())
        except:
            pass
        try:
            s += "  [dataType=0x%x]\n" % (self.get_dataType())
        except:
            pass
        try:
            s += "  [data=";
            for i in range(0, 3):
                s += "%f " % (self.getElement_data(i))
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: tx_timestamp
    #   Field type: float
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'tx_timestamp' is signed (True).
    #
    def isSigned_tx_timestamp(self):
        return True
    
    #
    # Return whether the field 'tx_timestamp' is an array (False).
    #
    def isArray_tx_timestamp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tx_timestamp'
    #
    def offset_tx_timestamp(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'tx_timestamp'
    #
    def offsetBits_tx_timestamp(self):
        return 0
    
    #
    # Return the value (as a float) of the field 'tx_timestamp'
    #
    def get_tx_timestamp(self):
        return self.getFloatElement(self.offsetBits_tx_timestamp(), 32, 0)
    
    #
    # Set the value of the field 'tx_timestamp'
    #
    def set_tx_timestamp(self, value):
        self.setFloatElement(self.offsetBits_tx_timestamp(), 32, value, 0)
    
    #
    # Return the size, in bytes, of the field 'tx_timestamp'
    #
    def size_tx_timestamp(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'tx_timestamp'
    #
    def sizeBits_tx_timestamp(self):
        return 32
    
    #
    # Accessor methods for field: seqNo
    #   Field type: short
    #   Offset (bits): 32
    #   Size (bits): 8
    #

    #
    # Return whether the field 'seqNo' is signed (True).
    #
    def isSigned_seqNo(self):
        return True
    
    #
    # Return whether the field 'seqNo' is an array (False).
    #
    def isArray_seqNo(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqNo'
    #
    def offset_seqNo(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqNo'
    #
    def offsetBits_seqNo(self):
        return 32
    
    #
    # Return the value (as a short) of the field 'seqNo'
    #
    def get_seqNo(self):
        return self.getUIntElement(self.offsetBits_seqNo(), 8, 1)
    
    #
    # Set the value of the field 'seqNo'
    #
    def set_seqNo(self, value):
        self.setUIntElement(self.offsetBits_seqNo(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqNo'
    #
    def size_seqNo(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'seqNo'
    #
    def sizeBits_seqNo(self):
        return 8
    
    #
    # Accessor methods for field: send_ID
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'send_ID' is signed (True).
    #
    def isSigned_send_ID(self):
        return True
    
    #
    # Return whether the field 'send_ID' is an array (False).
    #
    def isArray_send_ID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'send_ID'
    #
    def offset_send_ID(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'send_ID'
    #
    def offsetBits_send_ID(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'send_ID'
    #
    def get_send_ID(self):
        return self.getUIntElement(self.offsetBits_send_ID(), 8, 1)
    
    #
    # Set the value of the field 'send_ID'
    #
    def set_send_ID(self, value):
        self.setUIntElement(self.offsetBits_send_ID(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'send_ID'
    #
    def size_send_ID(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'send_ID'
    #
    def sizeBits_send_ID(self):
        return 8
    
    #
    # Accessor methods for field: recv_Rob_ID
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'recv_Rob_ID' is signed (True).
    #
    def isSigned_recv_Rob_ID(self):
        return True
    
    #
    # Return whether the field 'recv_Rob_ID' is an array (False).
    #
    def isArray_recv_Rob_ID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'recv_Rob_ID'
    #
    def offset_recv_Rob_ID(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'recv_Rob_ID'
    #
    def offsetBits_recv_Rob_ID(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'recv_Rob_ID'
    #
    def get_recv_Rob_ID(self):
        return self.getUIntElement(self.offsetBits_recv_Rob_ID(), 16, 1)
    
    #
    # Set the value of the field 'recv_Rob_ID'
    #
    def set_recv_Rob_ID(self, value):
        self.setUIntElement(self.offsetBits_recv_Rob_ID(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'recv_Rob_ID'
    #
    def size_recv_Rob_ID(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'recv_Rob_ID'
    #
    def sizeBits_recv_Rob_ID(self):
        return 16
    
    #
    # Accessor methods for field: dataType
    #   Field type: byte
    #   Offset (bits): 64
    #   Size (bits): 8
    #

    #
    # Return whether the field 'dataType' is signed (True).
    #
    def isSigned_dataType(self):
        return True
    
    #
    # Return whether the field 'dataType' is an array (False).
    #
    def isArray_dataType(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dataType'
    #
    def offset_dataType(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'dataType'
    #
    def offsetBits_dataType(self):
        return 64
    
    #
    # Return the value (as a byte) of the field 'dataType'
    #
    def get_dataType(self):
        return self.getSIntElement(self.offsetBits_dataType(), 8, 1)
    
    #
    # Set the value of the field 'dataType'
    #
    def set_dataType(self, value):
        self.setSIntElement(self.offsetBits_dataType(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dataType'
    #
    def size_dataType(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'dataType'
    #
    def sizeBits_dataType(self):
        return 8
    
    #
    # Accessor methods for field: data
    #   Field type: float[]
    #   Offset (bits): 72
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'data' is signed (True).
    #
    def isSigned_data(self):
        return True
    
    #
    # Return whether the field 'data' is an array (True).
    #
    def isArray_data(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'data'
    #
    def offset_data(self, index1):
        offset = 72
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 32
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'data'
    #
    def offsetBits_data(self, index1):
        offset = 72
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 32
        return offset
    
    #
    # Return the entire array 'data' as a float[]
    #
    def get_data(self):
        tmp = [None]*3
        for index0 in range (0, self.numElements_data(0)):
                tmp[index0] = self.getElement_data(index0)
        return tmp
    
    #
    # Set the contents of the array 'data' from the given float[]
    #
    def set_data(self, value):
        for index0 in range(0, len(value)):
            self.setElement_data(index0, value[index0])

    #
    # Return an element (as a float) of the array 'data'
    #
    def getElement_data(self, index1):
        return self.getFloatElement(self.offsetBits_data(index1), 32, 0)
    
    #
    # Set an element of the array 'data'
    #
    def setElement_data(self, index1, value):
        self.setFloatElement(self.offsetBits_data(index1), 32, value, 0)
    
    #
    # Return the total size, in bytes, of the array 'data'
    #
    def totalSize_data(self):
        return (96 / 8)
    
    #
    # Return the total size, in bits, of the array 'data'
    #
    def totalSizeBits_data(self):
        return 96
    
    #
    # Return the size, in bytes, of each element of the array 'data'
    #
    def elementSize_data(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'data'
    #
    def elementSizeBits_data(self):
        return 32
    
    #
    # Return the number of dimensions in the array 'data'
    #
    def numDimensions_data(self):
        return 1
    
    #
    # Return the number of elements in the array 'data'
    #
    def numElements_data():
        return 3
    
    #
    # Return the number of elements in the array 'data'
    # for the given dimension.
    #
    def numElements_data(self, dimension):
        array_dims = [ 3,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
